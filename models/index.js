var mongoose = require('mongoose')
, Schema = mongoose.Schema;

exports.EmailRawRequest = mongoose.model('EmailRawRequest', new Schema({
	path: String
	, headers: Schema.Types.Mixed
	// ,from: String
	// ,subject: String
	// ,templateName: String
	// ,content: String
	// ,statusUpdateURL: String
	, owner: {type: Schema.Types.ObjectId, ref: 'User'}
	, queue: {type:Schema.Types.ObjectId, ref: 'EmailQueue'}
}), 'email_raw_request');

exports.EmailJob = mongoose.model('EmailJob', new Schema({
	to: String
	,data: Schema.Types.Mixed
	// ,from: String
	// ,subject: String // lets assume they cannot be specialized first, and just store in queue object
	,status:{type: String, enum: ['created', 'sent', 'failed'], default: "created"}
	,dateCreated:{ type: Date, default: Date.now }
	// , owner: {type: Schema.Types.ObjectId, ref: 'User'} // no point storing here, if report are required, they should be generated by some sort of aggregation, save some place
	, queue: {type: Schema.Types.ObjectId, ref: 'EmailQueue'}
}), 'email_job');

exports.EmailQueue = mongoose.model('EmailQueue', new Schema({
	templateName: String
	// , tos: [String] // dont store here, it can get to huge numbers, better to search the jobs and aggregate
	, subject: String
	, from: String
	, content: String
	, statusUpdateURL: String
	, description: String
	, html: String
	, status:{type: String, enum: ['parsing', 'active', 'complete', 'error'], default: "parsing"}
	, appName:''
	, dateCreated :{ type: Date, default: Date.now }
	, lastUpdated:{ type: Date, default: Date.now }
	, dateCompleted:{ type: Date, default: Date.now }
	// , jobs:[{ type: Schema.Types.ObjectId, ref: 'EmailJob' }] // not storing here as an array anymore as it can be a really large number
	, rawrequest: {type:Schema.Types.ObjectId, ref: 'EmailRawRequest'}
	, owner: {type: Schema.Types.ObjectId, ref: 'User'}
}), 'email_queue');

// should make a compound name and owner key and check on uniqueness
var templateSchema = new Schema({
	name:{type: String, required: true}
	, content : String
	, compiled : String
	, dateCreated :{ type: Date, default: Date.now }
	, owner: {type: Schema.Types.ObjectId, ref: 'User'}
});
exports.EmailTemplate = mongoose.model('EmailTemplate', templateSchema, 'email_template');


